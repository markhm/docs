---
title: Application Theme
order: 25
layout: page
---

= Application Theme

Application Theme is the standard way to organize themes in a Vaadin application, making it easier to switch between themes and allow packaging a theme to reuse in other Vaadin applications.

== Define Application Themes

Figure 1 illustrates a sample theme setup for "my-theme" application theme.

.A sample application theme "my-theme"
image::images/content-of-application-theme.png[width="80%"]

=== Application Theme Folder
Application themes are placed under the `frontend/theme/` folder of a Vaadin project's root location.
The theme folder location is not configurable.
Each theme is in a separate folder, the folder name is also the theme name that can be used for `@Theme`.

For example:
 
 * `@Theme("alpaca")`: the files should be in `frontend/theme/alpaca/`
 * `@Theme("frost-bite")`: the files should be `in frontend/theme/frost-bite/`

=== Component Styles

Component-specific style sheets are placed under the `components` folder.
The file name must match the tag name of the component that you want to style.
See <<styling-components#, Styling Components>>.

NOTE: Component styles can override <<theme-variants#component-variants, component variants>> styles.
For example, styles in `vaadin-button.css` file can override styles from `ButtonVariant.LUMO_ERROR` variant of a Vaadin Button component.

=== Static Resources

You can create folders for static resources, such as images or fonts.
When using in a style sheet, the resource location is relative to the CSS file location.

For example, in Figure 1, `global.css` file can have `background: url('./images/bg.jpg');`

NOTE: The static resource must be available from the application theme folder for it to be handled, else it should be available with the given URL.

=== Global Styles

Application-specific styling across application views and application-specific components are defined in CSS files under the theme folder.

For example, <<css-custom-properties#,CSS Custom Properties>> or `@font-face` can be defined in a `global.css` file.
See <<styling-applications#, Styling Applications>>.

NOTE: Global styles can override <<theme-variants#global-variants, global variants>> styles.
For example, `Lumo.DARK` variant defines a `--lumo-base-color` which can be overridden by `global.css` file.

=== Theme Configuration	

==== Assets	

Assets like fonts and images from an npm dependency can be used in a theme after mapping them from the dependency to local URIs by adding an `assets` block in `theme.json`.	

[source, JSON]	
----	
"assets": {	
  "@fortawesome/fontawesome-free": {
    "svgs/regular/**": "fortawesome/icons"
  }
}	
----	

A style sheet in the theme can use the assets by adding `VAADIN/static/` to the local URIs defined in `theme.json`.

[source, CSS]	
----	
background-image: url('VAADIN/static/fortawesome/icons/snowflake.svg');	
----	

== Use application themes

In server-side views (Java), use the [classname]#@Theme# annotation to apply an application theme.
You must set the annotation on an https://vaadin.com/api/platform/com/vaadin/flow/component/page/AppShellConfigurator.html[AppShellConfigurator] class, or an error "Found app shell configuration annotations in non `AppShellConfigurator` classes." is thrown.

[source, Java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=apptheme, indent=0, group=Java]
----

A theme variant can also be applied.

[source, Java]
----
include::src/main/java/com/vaadin/flow/tutorial/theme/UsingComponentThemes.java[tags=lumo-dark, indent=0, group=Java]
----
See <<theme-variants#global-variants>>.

NOTE: Any changes to theme folder contents (add/remove files, file modifications) are automatically picked up by webpack.
If a running app has live reload available, you can wait for it to reload the changes, otherwise, you can manually refresh the browser.

== Application Theme as a Dependency

=== Create a Theme Dependency

- Create a separate project with the theme folder inside `src/main/resources/META-INF/resources/theme/`
- Put the theme assets into the theme folder
- Build the project into a JAR file

=== Apply Theme to Application Project

- Add the theme JAR as a dependency in a Vaadin app project
- Apply the theme with the `@Theme` annotation
